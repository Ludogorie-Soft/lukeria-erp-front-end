  name: frontend-build

  on:
    pull_request:
      types:
        - open
      branches:
        - main
    workflow_dispatch:

  jobs:
    compile:
      runs-on: ubuntu-latest
      name: Compile project
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Set up Java
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'liberica'

        - name: Cache Maven dependencies
          uses: actions/cache@v3
          with:
            path: ~/.m2/repository
            key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              maven-${{ runner.os }}-

        - name: Build project
          run: |
            chmod +x ./mvnw
            ./mvnw clean compile

    build:
      runs-on: ubuntu-latest
      name: Build frontend
      needs: [compile]
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Set up Java
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'liberica'

        - name: Cache Maven dependencies
          uses: actions/cache@v3
          with:
            path: ~/.m2/repository
            key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              maven-${{ runner.os }}-

        - name: Build project
          run: |
            chmod +x ./mvnw
            ./mvnw clean package

    build-image:
      name: Build Docker image
      runs-on: ubuntu-latest
      needs: [build]
      steps:
        - name: Check out repository code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Get short git SHA code
          id: sha
          run: echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build and push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            file: Dockerfile
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/lukeria-frontend:${{ steps.sha.outputs.SHA }}

    cleanup-images:
      name: Cleanup old Docker images
      runs-on: ubuntu-latest
      needs: [ build-image ]
      steps:
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Download and extract hub-tool
          run: |
            # Download and extract hub-tool
            curl -sSL https://github.com/docker/hub-tool/releases/latest/download/hub-tool-linux-amd64.tar.gz -o hub-tool.tar.gz
            tar -xzf hub-tool.tar.gz
            chmod +x hub-tool

        - name: Set up hub-tool authentication
          run: |
            ./hub-tool login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Delete old images
          run: |
            # Get list of tags, sort by creation date, and keep only the last 5
            REPO="${{ secrets.DOCKERHUB_USERNAME }}/lukeria-frontend"
            TAGS_TO_DELETE=$(./hub-tool tag ls $REPO --sort created -f '{{.Tag}}' | head -n -5)

            # Delete old tags
            for TAG in $TAGS_TO_DELETE; do
              echo "Deleting tag: $TAG"
              ./hub-tool tag rm $REPO:$TAG --force || true
            done
